title Isaac and the Conservation of Mass
author Menderbug
homepage menderbug.itch.io

game_uri https://menderbug.itch.io/isaac-and-the-conservation-of-mass

=====
TAGS
=====

U_ = up
L_ = left
R_ = right
D_ = down

( Abbreviating these since they appear in almost every rule and just bloat the code otherwise.
ForwardPropagage ResolveMovement DetectCycles BlockCycles CleanupStep)
LoopSection = FP RM DC BC CS

directions1 = directions

========
OBJECTS
========

Background
LIGHTGREEN GREEN
11111
01111
11101
11111
10111

Wall
BROWN DARKBROWN
00010
11111
01000
11111
00010

PlayerSprite Player
Black Orange White Blue
..000000..
..000000..
..111111..
..111111..
2222222222
2222222222
..333333..
..333333..
..33..33..
..33..33..

Jelly1x1Sprite
Orange Yellow
0000000000
0000000000
00......00
00......00
00......00
00......00
00......00
00......00
0000000000
0000000000

Jelly1x1TallSprite
Brown
0000000000
0000000000
00......00
00......00
00......00
00......00
00......00
00......00
0000000000
0000000000

Jelly2x1Sprite:left Jelly2x1Sprite:right
Orange Yellow
00000000000000000000
00000000000000000000
00................00
00................00
00................00
00................00
00................00
00................00
00000000000000000000
00000000000000000000


Jelly2x1Sprite:up Jelly2x1Sprite:down
Orange Yellow
0000000000
0000000000
00......00
00......00
00......00
00......00
00......00
00......00
00......00
00......00
00......00
00......00
00......00
00......00
00......00
00......00
00......00
00......00
0000000000
0000000000

_Connector:directions
pink
.....
.....
..000
.....
.....
rot:right:>

_Player
transparent

_Jelly1x1
transparent

_Jelly1x1Tall
transparent

_Jelly2x1:left _Jelly2x1:right
transparent

_Jelly2x1:up _Jelly2x1:down
transparent

( Used to mark some cells during the 2x1 squishing process )
_TempJelly
transparent

_Moving:directions
pink

_Blocked:directions
pink

_Squishing
yellow

_Unprocessed
red

_Processing
green

_Pending
purple

_PendingChecking
black

_PendingNoCycle
grey

_PendingCycle
white

_Processed
blue

_CheckMovement
transparent

_MovementTarget
pink

_MovementConflict
pink

_Temp
pink

_Rerun
pink

_RerunDC
pink

_RunSecondStep
pink

_Vacated
pink

( Abbreviating these since they appear in almost every rule and just bloat the code otherwise. )
_LS:LoopSection
transparent

=======
LEGEND
=======

. = Background
# = Wall
P = PlayerSprite
* = Jelly1x1Sprite
│ = Jelly2x1Sprite:up
─ = Jelly2x1Sprite:right
! = Jelly1x1TallSprite


Sprite = PlayerSprite or Jelly1x1Sprite or Jelly2x1Sprite:directions or Jelly1x1TallSprite

_Jelly2x1 = _Jelly2x1:directions

_Jelly = _Jelly1x1 or _Jelly2x1 or _Jelly1x1Tall or _TempJelly

ObjectType = _Jelly or _Player

RigidMovable = _Jelly1x1 or _Jelly1x1Tall or _Player

Movable = _Jelly or _Player

_Connector = _Connector:directions
_Moving = _Moving:directions
_Blocked = _Blocked:directions
_FullyBlocked = _Blocked:left and _Blocked:right and _Blocked:up and _Blocked:down
_BlockedExcept:left = _Blocked:right and _Blocked:up and _Blocked:down
_BlockedExcept:right = _Blocked:left and _Blocked:up and _Blocked:down
_BlockedExcept:up = _Blocked:left and _Blocked:right and _Blocked:down
_BlockedExcept:down = _Blocked:left and _Blocked:right and _Blocked:up
Status = _Unprocessed or _Processing or _Pending or _PendingChecking or _Processed
_PendingChecked = _PendingCycle or _PendingNoCycle

MovementMarker = _MovementTarget or _MovementConflict

=======
SOUNDS
=======

Movable MOVE 36772507

================
COLLISIONLAYERS
================

--<v--

Background
Sprite, Wall

--

_Player, _Jelly
directions -> _Blocked:directions
_Moving, _Vacated
_Squishing
_CheckMovement
MovementMarker
_Temp
_Rerun
_RerunDC
_RunSecondStep
Status
_PendingChecked
_LS:LoopSection
directions -> _Connector:directions

======
RULES
======

( Clean up )
[ _Connector:directions ] -> [ ]
[ ObjectType ] -> [ ]

( Expand player. We're handling movement manually, so we replace the movement input with a marker object. )
[ > PlayerSprite ] -> [ _Player _Moving:> _Connector:right _Connector:up ]
[ PlayerSprite ] -> [ _Player _Connector:right _Connector:up ]
[ _Player _Connector:> _Connector:^ | no _Player ] -> [ _Player _Connector:> _Connector:^ | _Player _Connector:< _Connector:^ ]
[ _Player _Moving ] [ _Player ] -> [ _Player _Moving _Processing ] [ _Player _Moving _Processing ]

( Expand 1x1 jellies )
[ Jelly1x1Sprite ] -> [ _Jelly1x1 _Connector:right _Connector:up ]
[ _Jelly1x1 _Connector:> _Connector:^ | ] -> [ _Jelly1x1 _Connector:> _Connector:^ | _Jelly1x1 _Connector:< _Connector:^ ]

( Expand tall 1x1 jellies )
[ Jelly1x1TallSprite ] -> [ _Jelly1x1Tall _Connector:right _Connector:up ]
[ _Jelly1x1Tall _Connector:> _Connector:^ | ] -> [ _Jelly1x1Tall _Connector:> _Connector:^ | _Jelly1x1Tall _Connector:< _Connector:^ ]

( Expand 2x1 jellies )
directions [ Jelly2x1Sprite:directions ] -> [ _Jelly2x1:directions _Connector:right _Connector:up ]
[ _Jelly2x1:perpendicular _Connector:> _Connector:perpendicular | ] -> [ _Jelly2x1:perpendicular _Connector:> _Connector:perpendicular | _Jelly2x1:perpendicular _Connector:< _Connector:perpendicular ]
[ _Jelly2x1:> _Connector:> _Connector:perpendicular no _Temp | | | ] -> [ _Jelly2x1:> _Connector:> _Connector:perpendicular | _Jelly2x1:> _Connector:> _Connector:perpendicular _Connector:< _Temp | _Jelly2x1:> _Connector:> _Connector:perpendicular _Connector:< _Temp | _Jelly2x1:> _Connector:< _Connector:perpendicular ]
[ _Temp ] -> [ ]

[ Movable no Status ] -> [ Movable _Unprocessed ]

( Can't nest loops in PS, so we have to put everything in a single loop and group things manually )
random [ ] -> [ _Temp ]
[ ] [ _Temp ] -> [ _LS:FP ] [ ]
[ _LS:FP ] [ _Player _Moving:> ] -> [ _LS:FP > _RunSecondStep ] [ _Player _Moving:> ]

startloop
  ((( Forward propagate movement intent )))
  
  ( Walls immediately block movement )
  [ _LS:FP ] [ Movable _Moving:> no _Blocked:> | Wall ] -> [ _LS:FP _Rerun ] [ Movable _Moving:> _FullyBlocked | Wall ]
  directions [ _LS:FP ] [ Movable _Moving:directions _FullyBlocked _Connector:> | Movable _Moving:directions no _Blocked ] -> [ _LS:FP _Rerun ] [ Movable _Moving:directions _FullyBlocked _Connector:> | Movable _Moving:directions _FullyBlocked ]
 
  ( Movables trying to move into other movables are marked as pending )
  [ _LS:FP ] [ Movable _Moving:> no _Blocked:> _Processing no _Connector:> | Movable ] -> [ _LS:FP _Rerun ] [ Movable _Moving:> _Pending | Movable ]
  directions [ _LS:FP ] [ Movable _Moving:directions _Pending _Connector:> | Movable _Moving:directions _Processing ] -> [ _LS:FP _Rerun ] [ Movable _Moving:directions _Pending _Connector:> | Movable _Moving:directions _Pending ]
    
  ( Propagate movement to unprocessed movables )
  [ _LS:FP ] [ Movable _Moving:> no _Blocked:> no _Connector:> | Movable no _Moving no _Blocked:> ] -> [ _LS:FP _Rerun _CheckMovement ] [ Movable _Moving:> | Movable _Moving:> _Processing no _Blocked ]
  [ _LS:FP ] [ Movable _Moving _Connector:> | Movable no _Moving ] -> [ _LS:FP _Rerun ] [ Movable _Moving _Connector:> | Movable _Moving _Processing no _Blocked ]

  [ _LS:FP no _Rerun ] -> [ _LS:RM ]
  [ _LS:FP _Rerun ] -> [ _LS:FP ]
  
  ((( Resolve movement and squishing )))
  
  ( Find cells moved into by multiple objects and block those objects )
  [ _LS:RM _CheckMovement ] [ Movable _Moving:> no _Blocked:> _Processing no _Connector:> no _Temp | no _MovementTarget ] -> [ _LS:RM _CheckMovement ] [ Movable _Moving:> _Processing _Temp | _MovementTarget ]
  [ _LS:RM _CheckMovement ] [ Movable _Moving:> no _Blocked:> _Processing no _Connector:> no _Temp | _MovementTarget ] -> [ _LS:RM _CheckMovement ] [ Movable _Moving:> _Processing _Temp | _MovementConflict ]
  [ _LS:RM _CheckMovement ] [ _Temp ] -> [ _LS:RM _CheckMovement ] [ ]
  [ _LS:RM _CheckMovement ] [ Movable _Moving:> no _Blocked:> no _Connector:> | _MovementConflict ] -> [ _LS:RM _CheckMovement _Rerun ] [ Movable _Moving:> _Blocked:> _Processing | _MovementConflict ]
  directions [ _LS:RM _CheckMovement ] [ Movable _Moving:directions _Blocked:directions _Connector:> | Movable _Moving:directions ] -> [ _LS:RM _CheckMovement _Rerun ] [ Movable _Moving:directions _Blocked:directions _Connector:> | Movable _Moving:directions _Blocked:directions ]
  [ _LS:RM _CheckMovement ] [ MovementMarker ] -> [ _LS:RM _CheckMovement ] [ ]
  [ _LS:RM _CheckMovement ] -> [ _LS:RM ]
    
  ( Movables that are still marked as processing can move freely, so we perform the move and mark them as
    processed and blocked. To move all the things belonging to a movable, we move everything out of the moving
    cell into the empty cell, then move the movement marker and repeat. )
  [ _LS:RM ] [ Movable _Moving:> no _Blocked:> _Processing _Connector no _Squishing | no Movable ] -> [ _LS:RM _Rerun ] [ Movable _Moving:> _Processing | _Connector ]
  + [ _LS:RM ] [ Movable _Moving:> no _Blocked:> _Processing no _Squishing | no Movable ] -> [ _LS:RM _Rerun ] [ _Vacated | Movable _BlockedExcept:> _Processed no _Vacated ]
  
  ( Squishing objects that are still marked as processing can squish freely. We handle the different squishing
    cases explicitly. )
  ( Squish 2x1 equally. We expand the front 1x1 into a 2x1 and then delete the rear 1x1. )
  [ _LS:RM ] [ _Jelly2x1:perpendicular _Moving:< no _Blocked:< _Processing _Squishing | _Jelly2x1:perpendicular _Moving:> no _Blocked:> _Processing _Squishing ] -> [ _LS:RM _Rerun ] [ _Jelly2x1:perpendicular _Moving:< _Processing _Squishing _Temp | _Jelly2x1:perpendicular _Moving:> _Processing _Squishing _Temp ]
  [ _LS:RM ] [ _Connector:> no _Connector:< _Temp | _Connector:< _Connector:> _Temp ] -> [ _LS:RM _Rerun ] [ _Connector:> | _Connector:< ]
  [ _LS:RM ] [ | _Jelly2x1:perpendicular _Moving:< no _Blocked:< _Processing _Squishing _Connector:perpendicular | _Jelly2x1:perpendicular _Moving:> no _Blocked:> _Processing _Squishing | ] -> [ _LS:RM _Rerun ] [ _Jelly2x1:> _FullyBlocked _Processed _Connector:perpendicular _Connector:> | _Jelly2x1:> _FullyBlocked _Processed _Connector:perpendicular _Connector:< _Connector:> | _Jelly2x1:> _FullyBlocked _Processed _Connector:perpendicular _Connector:< _Connector:> | _Jelly2x1:> _FullyBlocked _Processed _Connector:perpendicular _Connector:< ]
  [ _LS:RM ] [ _Jelly2x1:parallel _Moving:> _Processing _Squishing _Connector:> | _Jelly2x1:parallel _Moving:> _Processing _Squishing _Connector:> | no _Squishing no _Connector:< ] -> [ _LS:RM _Rerun ] [ _Vacated no _Connector | _Vacated no _Connector | ]

  ( Squish 2x1 to one side. We expand the front 1x1 into a 2x1 and then delete the rear 1x1. )
  [ _LS:RM ] [ _Jelly2x1:perpendicular _Moving:< _Blocked:< _Processing _Squishing no _Connector:< _Connector:> | _Jelly2x1:perpendicular _Moving:> no _Blocked:> _Processing _Squishing _Connector:< _Connector:> | _TempJelly _Moving:> no _Blocked:> _Processing _Squishing _Connector:< no _Connector:> ] -> [ _LS:RM _Rerun ] [ _Jelly2x1:perpendicular _Moving:< _Blocked:< _Processing _Squishing _Connector:> _Temp | _Jelly2x1:perpendicular _Moving:> _Processing _Squishing _Connector:< _Connector:> _Temp | _TempJelly _Moving:> _Processing _Squishing _Connector:< ]
  [ _LS:RM ] [ _Jelly2x1:parallel _Connector:> no _Connector:< _Temp | _Connector:< _Connector:> _Temp ] -> [ _LS:RM _Rerun ] [ _Jelly2x1:parallel _Connector:> | _Connector:< ]
  [ _LS:RM ] [ _Jelly2x1:perpendicular _Moving:< _Blocked:< _Processing _Squishing _Connector:perpendicular | _Jelly2x1:perpendicular _Moving:> no _Blocked:> _Processing _Squishing | _TempJelly _Moving:> no _Blocked:> _Processing _Squishing _Connector:< no _Connector:> | ] -> [ _LS:RM _Rerun ] [ _Jelly2x1:> _FullyBlocked _Processed _Connector:perpendicular _Connector:> | _Jelly2x1:> _FullyBlocked _Processed _Connector:perpendicular _Connector:< _Connector:> | _Jelly2x1:> _FullyBlocked _Processed _Connector:perpendicular _Connector:< _Connector:> | _Jelly2x1:> _FullyBlocked _Processed _Connector:perpendicular _Connector:< ]
  [ _LS:RM ] [ _Jelly2x1:parallel _Moving:> _Processing _Squishing _Connector:> | _Jelly2x1:parallel _Moving:> _Processing _Squishing _Connector:> | no _Squishing no _Connector:< ] -> [ _LS:RM _Rerun ] [ _Vacated no _Connector | _Vacated no _Connector | ]
  
  ( When a 2x1 gets blocked halfway through squishing to one side, we remove the temporary jelly
    objects and treat this the same as if it had been blocked immediately. )
  [ _LS:RM ] [ _Jelly2x1:perpendicular _Moving:< _Blocked:< _Processing _Squishing no _Connector:< _Connector:> | _Jelly2x1:perpendicular _Moving:> _Processing _Squishing _Connector:< _Connector:> | _TempJelly _Moving:> _Blocked:> _Processing _Squishing _Connector:< ] -> [ _LS:RM _Rerun ] [ _Jelly2x1:perpendicular _Moving:< _Blocked:< _Processing _Squishing _Connector:> | _Jelly2x1:perpendicular _Moving:> _Blocked:> _Processing _Squishing _Connector:< | no _Blocked ]
  
  ( Squish 2x1 into a tall 1x1 if both sides are blocked. )
  [ _LS:RM ] [ _Jelly2x1:perpendicular _Moving:< _Blocked:< _Processing _Squishing | _Jelly2x1:perpendicular _Moving:> _Blocked:> _Processing _Squishing ] -> [ _LS:RM _Rerun ] [ _Jelly2x1:perpendicular _Moving:< _Blocked:< _Processing _Squishing _Temp | _Jelly2x1:perpendicular _Moving:> _Blocked:> _Processing _Squishing _Temp ]
  [ _LS:RM ] [ _Jelly2x1:parallel _Moving:> _Processing _Squishing _Connector:> no _Connector:< | _Jelly2x1:parallel _Moving:> _Processing _Squishing _Connector:< _Connector:> | _Jelly2x1:parallel _Temp _Processing _Squishing _Connector:< _Connector:> | _Jelly2x1:parallel _Temp _Processing _Squishing _Connector:< no _Connector:> ] -> [ _LS:RM _Rerun ] [ _Vacated no _Connector | _Vacated no _Connector | _Jelly1x1Tall no _Moving _Connector:> _Processed _FullyBlocked | _Jelly1x1Tall no _Moving _Connector:< _Processed _FullyBlocked ]

  ( If at this point a pending movable points at a vacated cell, we revert it to processing to check it again next
    iteration )
  [ _LS:RM ] [ Movable _Moving:> _Pending no _Connector:> | _Vacated ] -> [ _LS:RM _Rerun ] [ Movable _Moving:> _Processing | _Vacated ]
  directions [ _LS:RM ] [ Movable _Moving:directions _Processing _Connector:> | Movable _Moving:directions _Pending ] -> [ _LS:RM _Rerun ] [ Movable _Moving:directions _Processing _Connector:> | Movable _Moving:directions _Processing ]
  [ _LS:RM ] [ _Vacated ] -> [ _LS:RM ] [ ]
    
  
  ((( Process blocked objects )))

  ( If the player is blocked, we cancel the second step, if any )
  [ _LS:RM _RunSecondStep ] [ _Player _Processing _Moving:> _Blocked:> ] -> [ _LS:RM ] [ _Player _Processing _Moving:> _Blocked:> ]
  ( 1x1 objects become permanently blocked )
  [ _LS:RM ] [ RigidMovable _Processing _Moving:> _Blocked:> ] -> [ _LS:RM _Rerun ] [ RigidMovable _Processed _Blocked:> ]
  ( As do 2x1 blocks moving along their short side )
  [ _LS:RM ] [ _Jelly2x1:perpendicular _Processing _Moving:> _Blocked:> no _Squishing ] -> [ _LS:RM _Rerun ] [ _Jelly2x1:perpendicular _Processed _Blocked:> ]

  ( 2x1 blocks moving along their long side try to squish towards both sides )
  [ _LS:RM ] [ _Jelly2x1:parallel _Processing _Moving:> _Blocked:> _Connector:> | _Moving:> _Blocked:> _Connector:> | _Moving:> _Blocked:> _Connector:> | _Moving:> _Blocked:> no _Connector:> ] -> [ _LS:RM _Rerun ] [ _Jelly2x1:parallel _Moving:> no _Blocked _Processing _Squishing _Connector:> | _Moving:> no _Blocked _Squishing _Connector:> | _Squishing _Connector:> > _Temp | _Squishing > _Temp ]
  [ _LS:RM ] [ _Jelly2x1:directions _Connector:> perpendicular _Temp ] -> [ _LS:RM _Rerun _CheckMovement ] [ _Jelly2x1:directions _Moving:< no _Blocked _Connector:> ]
  
  ( 2x1 blocks trying to squish but being blocked on one side try to expand two cells to the other side.
    We mark this with some temporary jelly objects )
  [ _LS:RM ] [ _Jelly2x1:perpendicular _Processing _Blocked:< _Moving:< _Squishing _Connector:> | _Jelly2x1:perpendicular _Processing _Moving:> no _Blocked:> _Squishing | ] -> [ _LS:RM _Rerun _CheckMovement ] [ _Jelly2x1:perpendicular _Processing _Blocked:< _Moving:< _Squishing _Connector:> | _Jelly2x1:perpendicular _Processing _Moving:> _Squishing _Connector:> | _TempJelly _Processing _Moving:> _Squishing _Connector:< ]
  
  ( Blocked objects propagate this status backwards )
  [ _LS:RM ] [ Movable _Moving:> no _Blocked:> no _Connector:> | Movable _Processed _Blocked:> ] -> [ _LS:RM _Rerun ] [ Movable _Processing _Moving:> _FullyBlocked | Movable _Processed _Blocked:> ]
  directions [ _LS:RM ] [ Movable _Moving:directions _FullyBlocked _Connector:> | Movable _Moving:directions no _Blocked ] -> [ _LS:RM _Rerun ] [ Movable _Moving:directions _FullyBlocked _Connector:> | Movable _Moving:directions _FullyBlocked ]
  directions [ _LS:RM ] [ Movable _Moving:directions _Processing _Connector:> | Movable _Moving:directions _Pending ] -> [ _LS:RM _Rerun ] [ Movable _Moving:directions _Processing _Connector:> | Movable _Moving:directions _Processing ]
  
  [ _LS:RM no _Rerun ] -> [ _LS:DC ]
  [ _LS:RM _Rerun ] -> [ _LS:FP ]
  
  ((( Detect cycles of pending objects and block them )))
  [ _LS:DC ] [ _Pending ] -> [ _LS:DC _Temp ] [ _Pending ]
    
  ( Pick a pending object to process )
  [ _LS:DC _Temp ] [ _Pending no _PendingChecked _Moving:> no _Connector:> | _Pending ]  -> [ _LS:DC _RerunDC ] [ _Pending _Moving:> _Temp | _PendingChecking ]
  
  ( Spread the PendingChecking status to all objects the marked one indirectly depends on )
  directions [ _LS:DC ] [ _PendingChecking _Moving:directions _Connector:> | _Moving:directions _Pending ] -> [ _LS:DC ] [ _PendingChecking _Moving:directions _Connector:> | _Moving:directions _PendingChecking ]
  + [ _LS:DC ] [ _PendingChecking _Moving:> no _Connector:> | _Pending ] -> [ _LS:DC ] [ _PendingChecking _Moving:> | _PendingChecking ]
  
  ( If the marked object was itself marked as PendingChecking, it's part of a cycle )
  [ _LS:DC ] [ _Temp _PendingChecking  ] -> [ _LS:DC ] [ _Temp _PendingChecking _PendingCycle ]
  [ _LS:DC ] [ _Temp _Pending ] -> [ _LS:DC ] [ _Temp _Pending _PendingNoCycle ]
  
  ( Spread the PendingChecked status to the entire object )
  directions [ _LS:DC ] [ _PendingChecked _Moving:directions _Connector:> | _Moving:directions no _PendingChecked ] -> [ _LS:DC ] [ _PendingChecked _Moving:directions _Connector:> | _Moving:directions _PendingChecked ]
  
  ( Clean up PendingChecking status and move the temp marker back to the top left corner )
  [ _LS:DC ] [ _PendingChecking ] -> [ _LS:DC ] [ _Pending ]
  [ _LS:DC ] [ _Temp no _LS:DC ] -> [ _LS:DC _Temp ] [ ]
  
  ( Once we stop finding pending objects to check, we move on to resolving the cycles we found. )
  [ _LS:DC _Temp ] -> [ _LS:DC ]
  [ _LS:DC no _RerunDC ] -> [ _LS:BC ]
  [ _LS:DC _RerunDC ] -> [ _LS:DC ]
    
  [ _LS:BC ] [ _Pending _PendingCycle ] -> [ _LS:BC _Rerun ] [ _Processing _FullyBlocked ]
  [ _LS:BC ] [ _PendingNoCycle ] -> [ _LS:BC ] [ ]
  
  [ _LS:BC no _Rerun] -> [ _LS:CS ]
  [ _LS:BC _Rerun ] -> [ _LS:FP ]

  ((( CLeanup and check if we should run another step )))
  
  [ _LS:CS ] [ _Blocked ] -> [ _LS:CS ] [ ]
  [ _LS:CS ] [ _Unprocessed ] -> [ _LS:CS ] [ ]
  [ _LS:CS ] [ _Processed ] -> [ _LS:CS ] [ ]
  
  [ _LS:CS no _RunSecondStep ] -> [ ]
  
  [ _LS:CS > _RunSecondStep ] [ _Player no _Moving ] -> [ _LS:CS > _RunSecondStep ] [ _Player _Moving:> _Processing ]
  [ _LS:CS _RunSecondStep ] -> [ _LS:FP ]
endloop


( Render sprites again )
[ _Player _Connector:right _Connector:up ] -> [ PlayerSprite _Connector:right _Connector:up ]
[ _Jelly1x1 _Connector:right _Connector:up ] -> [ Jelly1x1Sprite _Connector:right _Connector:up ]
[ _Jelly1x1Tall _Connector:right _Connector:up ] -> [ Jelly1x1TallSprite _Connector:right _Connector:up ]
directions [ _Jelly2x1:directions _Connector:right _Connector:up no _Connector:left no _Connector:down ] -> [ Jelly2x1Sprite:directions _Connector:right _Connector:up ]

==============
WINCONDITIONS
==============


=======
LEVELS
=======

################
#..............#
#..............#
#..............#
#..............#
#..............#
#*.p.│...─.....#
#..............#
#....*...─.....#
#..............#
#..............#
################
