title Isaac and the Conservation of Mass
author Menderbug
homepage menderbug.itch.io

game_uri https://menderbug.itch.io/isaac-and-the-conservation-of-mass

=====
TAGS
=====

U_ = up
L_ = left
R_ = right
D_ = down

( Abbreviating these since they appear in almost every rule and just bloat the code otherwise.
ForwardPropagage ProcessMoving ProcessBlocked )
LoopSection = FP PM PB

========
OBJECTS
========

Background
LIGHTGREEN GREEN
11111
01111
11101
11111
10111

Wall
BROWN DARKBROWN
00010
11111
01000
11111
00010

PlayerSprite Player
Black Orange White Blue
..000000..
..000000..
..111111..
..111111..
2222222222
2222222222
..333333..
..333333..
..33..33..
..33..33..

Jelly1x1Sprite
Orange Yellow
0000000000
0000000000
00......00
00......00
00......00
00......00
00......00
00......00
0000000000
0000000000

Jelly2x1Sprite:left Jelly2x1Sprite:right
Orange Yellow
00000000000000000000
00000000000000000000
00................00
00................00
00................00
00................00
00................00
00................00
00000000000000000000
00000000000000000000


Jelly2x1Sprite:up Jelly2x1Sprite:down
Orange Yellow
0000000000
0000000000
00......00
00......00
00......00
00......00
00......00
00......00
00......00
00......00
00......00
00......00
00......00
00......00
00......00
00......00
00......00
00......00
0000000000
0000000000

_Connector:directions
pink
.....
.....
..000
.....
.....
rot:right:>

_Player
transparent

_Jelly1x1
transparent

_Jelly2x1:left _Jelly2x1:right
transparent

_Jelly2x1:up _Jelly2x1:down
transparent

_Moving:directions
pink

_Blocked:directions
pink

_Squishing
yellow

_Unprocessed
red

_Processing
green

_Pending
purple

_Processed
blue

_MovementTarget
pink

_MovementConflict
pink

_Temp
pink

_Rerun
pink

( Abbreviating these since they appear in almost every rule and just bloat the code otherwise. )
_LS:LoopSection
white

=======
LEGEND
=======

. = Background
# = Wall
P = PlayerSprite
* = Jelly1x1Sprite
│ = Jelly2x1Sprite:up
─ = Jelly2x1Sprite:right


Sprite = PlayerSprite or Jelly1x1Sprite or Jelly2x1Sprite:directions

_Jelly2x1 = _Jelly2x1:directions

_Jelly = _Jelly1x1 or _Jelly2x1

ObjectType = _Jelly or _Player

RigidMovable = _Jelly1x1 or _Player

Movable = _Jelly or _Player

_Connector = _Connector:directions
_Moving = _Moving:directions
_Blocked = _Blocked:directions
Status = _Unprocessed or _Processing or _Pending or _Processed

MovementMarker = _MovementTarget or _MovementConflict

=======
SOUNDS
=======

Movable MOVE 36772507

================
COLLISIONLAYERS
================

--<v--

Background
Sprite, Wall

--

_Player, _Jelly
_Blocked, _Moving
_Squishing
MovementMarker
_Temp
_Rerun
directions -> _Connector:directions
Status
_LS:LoopSection

======
RULES
======

( Clean up )
[ _Connector:directions ] -> [ ]
[ ObjectType ] -> [ ]

( Expand player. We're handling movement manually, so we replace the movement input with a marker object. )
[ > PlayerSprite ] -> [ _Player _Moving:> _Connector:right _Connector:up ]
[ PlayerSprite ] -> [ _Player _Connector:right _Connector:up ]
[ _Player _Connector:> _Connector:^ | no _Player ] -> [ _Player _Connector:> _Connector:^ | _Player _Connector:< _Connector:^ ]
[ _Player _Moving ] [ _Player ] -> [ _Player _Moving _Processing ] [ _Player _Moving _Processing ]

( Expand 1x1 jellies )
[ Jelly1x1Sprite ] -> [ _Jelly1x1 _Connector:right _Connector:up ]
[ _Jelly1x1 _Connector:> _Connector:^ | ] -> [ _Jelly1x1 _Connector:> _Connector:^ | _Jelly1x1 _Connector:< _Connector:^ ]

( Expand 2x1 jellies )
directions [ Jelly2x1Sprite:directions ] -> [ _Jelly2x1:directions _Connector:right _Connector:up ]
[ _Jelly2x1:perpendicular _Connector:> _Connector:perpendicular | ] -> [ _Jelly2x1:perpendicular _Connector:> _Connector:perpendicular | _Jelly2x1:perpendicular _Connector:< _Connector:perpendicular ]
[ _Jelly2x1:> _Connector:> _Connector:perpendicular no _Temp | | | ] -> [ _Jelly2x1:> _Connector:> _Connector:perpendicular | _Jelly2x1:> _Connector:> _Connector:perpendicular _Connector:< _Temp | _Jelly2x1:> _Connector:> _Connector:perpendicular _Connector:< _Temp | _Jelly2x1:> _Connector:< _Connector:perpendicular ]
[ _Temp ] -> [ ]

[ Movable ] -> [ Movable _Unprocessed ]

( Can't nest loops in PS, so we have to build our put everything in a single loop and group things manually )
random [ ] -> [ _LS:FP ]

startloop
  ( Forward propagate movement intent )
  
  ( Walls immediately block movement )
  [ _LS:FP ] [ Movable _Moving:> | Wall ] -> [ _LS:FP _Rerun ] [ Movable _Blocked:> | Wall ]
  directions [ _LS:FP ] [ Movable _Blocked:directions _Connector:> | Movable _Moving:directions ] -> [ _LS:FP _Rerun ] [ Movable _Blocked:directions _Connector:> | Movable _Blocked:directions ]

  ( Movables trying to move into other movables are marked as pending )
  [ _LS:FP ] [ Movable _Moving:> _Processing no _Connector:> | Movable ] -> [ _LS:FP _Rerun ] [ Movable _Moving:> _Pending | Movable ]
  [ _LS:FP ] [ Movable _Pending _Connector:> | Movable ] -> [ _LS:FP _Rerun ] [ Movable _Pending _Connector:> | Movable _Pending ]
    
  ( Propagate movement to unprocessed movables )
  [ _LS:FP ] [ Movable _Moving:> no _Connector:> | Movable _Unprocessed ] -> [ _LS:FP _Rerun ] [ Movable _Moving:> | Movable _Moving:> _Processing ]
  [ _LS:FP ] [ Movable _Moving _Connector:> | Movable _Unprocessed ] -> [ _LS:FP _Rerun ] [ Movable _Moving _Connector:> | Movable _Moving _Processing ]

  [ _LS:FP no _Rerun ] -> [ _LS:PM ]
  [ _Rerun ] -> [ ]
  
  ( Process moving objects )
  
  ( Find cells moved into by multiple objects and block those objects )
  [ _LS:PM ] [ Movable _Moving:> _Processing no _Connector:> no _Temp | no _MovementTarget ] -> [ _LS:PM _Rerun ] [ Movable _Moving:> _Processing _Temp | _MovementTarget ]
  [ _LS:PM ] [ Movable _Moving:> _Processing no _Connector:> no _Temp | _MovementTarget ] -> [ _LS:PM _Rerun ] [ Movable _Moving:> _Processing _Temp | _MovementConflict ]
  [ _Temp ] -> [ ]
  [ _LS:PM ] [ Movable _Moving:> no _Connector:> | _MovementConflict ] -> [ _LS:PM _Rerun ] [ Movable _Processing _Blocked:> | _MovementConflict ]
  directions [ _LS:PM ] [ Movable _Blocked:directions _Connector:> | Movable _Moving:directions ] -> [ _LS:PM _Rerun ] [ Movable _Blocked:directions _Connector:> | Movable _Blocked:directions ]
  [ MovementMarker ] -> [ ]
  
  ( If at this point a pending movable points at a processing movable, the latter is going to move out
    of the way, so we revert the pending one to check it again next iteration )
  [ _LS:PM ] [ Movable _Moving:> _Pending no _Connector:> | Movable no _Blocked _Processing ] -> [ _LS:PM _Rerun ] [ Movable _Moving:> _Processing | Movable _Processing ]
  [ _LS:PM ] [ Movable _Processing _Connector:> | Movable ] -> [ _LS:PM _Rerun ] [ Movable _Processing _Connector:> | Movable _Processing ]
  
  ( Movables that are still marked as processing can move freely, so we perform the move and mark them as
    processed and blocked. To move all the things belonging to a movable, we move everything out of the moving
    cell into the empty cell, then move the movement marker and repeat. )
  [ _LS:PM ] [ Movable _Moving:> _Processing _Connector | no Movable ] -> [ _LS:PM _Rerun ] [ Movable _Moving:> _Processing | _Connector ]
  + [ _LS:PM ] [ Movable _Moving:> _Processing | no Movable ] -> [ _LS:PM _Rerun ] [ | Movable _Blocked:> _Processed ]
  
  [ _LS:PM ] -> [ _LS:PB ]
  
  ( TODO: Process squishing objects )

  ( Process blocked objects )

  ( 1x1 objects become permanently blocked )
  [ _LS:PB ] [ RigidMovable _Processing _Blocked ] -> [ _LS:PB _Rerun ] [ RigidMovable _Processed _Blocked ]
  ( As do 2x1 blocks moving along their short side )
  [ _LS:PB ] [ _Jelly2x1:perpendicular _Processing _Blocked:> no _Squishing ] -> [ _LS:PB _Rerun ] [ _Jelly2x1:perpendicular _Processed _Blocked:> ]

  ( 2x1 blocks moving along their long side try to squish towards both sides )
  [ _LS:PB ] [ _Jelly2x1:parallel _Processing _Blocked:> _Connector:> | _Blocked:> _Connector:> | _Blocked:> _Connector:> | _Blocked:> no _Connector:> ] -> [ _LS:PB _Rerun ] [ _Jelly2x1:parallel _Moving:> _Processing _Squishing _Connector:> | _Jelly2x1:parallel _Moving:> _Squishing _Connector:> | _Squishing _Connector:> > _Temp | _Squishing > _Temp ]
  [ _LS:PB ] [ _Jelly2x1:directions _Connector:> perpendicular _Temp ] -> [ _LS:PB _Rerun ] [ _Jelly2x1:directions _Moving:< _Connector:> ]

  ( Blocked objects propagate this status backwards )
  [ _LS:PB ] [ Movable _Moving:> no _Connector:> | Movable _Processed _Blocked ] -> [ _LS:PB _Rerun ] [ Movable _Processing _Blocked:> | Movable _Processed _Blocked ]
  directions [ _LS:PM ] [ Movable _Blocked:directions _Connector:> | Movable _Moving:directions ] -> [ _LS:PM _Rerun ] [ Movable _Blocked:directions _Connector:> | Movable _Blocked:directions ]
  [ _LS:PB ] [ Movable _Processing _Connector:> | Movable _Pending ] -> [ _LS:PB _Rerun ] [ Movable _Processing _Connector:> | Movable _Processing ]
  
  [ _LS:PB _Rerun ] -> [ _LS:FP ]
  [ _LS:PB ] -> [ ]
endloop

[ _Blocked ] -> [ ]
[ _Unprocessed ] -> [ ]
[ _Processed ] -> [ ]
( TODO: this should be handled in the loop )
[ _Pending ] -> [ ]

[ moving Movable _Connector:directions ] -> [ moving Movable moving _Connector:directions ]

(((( LATE RULES ))))

( Render sprites again )
late [ _Player _Connector:right _Connector:up ] -> [ PlayerSprite _Connector:right _Connector:up ]
late [ _Jelly1x1 _Connector:right _Connector:up ] -> [ Jelly1x1Sprite _Connector:right _Connector:up ]
late directions [ _Jelly2x1:directions _Connector:right _Connector:up no _Connector:left no _Connector:down ] -> [ Jelly2x1Sprite:directions _Connector:right _Connector:up ]

==============
WINCONDITIONS
==============


=======
LEVELS
=======

################
#..............#
#..............#
#..............#
#..............#
#........│.....#
#*.p.#.........#
#..............#
#....*...─.....#
#..............#
#..............#
################
